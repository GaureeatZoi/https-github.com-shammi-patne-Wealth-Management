@model ZOI.BAL.ViewModels.ClientAccountMappingViewModel
@using ZOI.BAL.Utilites
@{
    if (Model.AccountsMapping.ID > 0)
    {
        ViewData["Title"] = "Update Client Mapping Details";
    }

    ViewData["Title"] = "Add Client Mapping Details";
    ViewData["ActionTitle"] = "Back";
    ViewData["ActionIcon"] = "zmdi-arrow-back";
    ViewData["ActionId"] = "btn_back";
    ViewData["URL"] = Url.Action("SummaryView");
}

<form>
    <div id="div_form" class="container-fluid" style="display: none;margin-top: 40px;">
        <div class="content-body">
            <div class="card p-t-20">
                <div class="card-body">
                    <div class="row">
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                            <div class="form-group is-empty">
                                @Html.DisplayNameFor(e => e.AccountsMapping.ClientID)<span style="color: red"><strong>&nbsp;*</strong></span>
                                @Html.DropDownListFor(e => e.AccountsMapping.ClientID, Model.ClientList ?? new List<SelectListItem>(), Constants.Select, new { @id = "ddl_client", @class = "form-control select2-container--material", @style = "width: 100%" })
                                <br style="line-height:1em" />
                                <span class="ddl-client field-validation-error"></span>
                                @Html.ValidationMessageFor(e => e.AccountsMapping.ClientID, "", new { @style = "margin-top: 0px !important;" })
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                            <div class="form-group is-empty">
                                @Html.DisplayNameFor(e => e.AccountsMapping.AccountTypeID)<span style="color: red"><strong>&nbsp;*</strong></span>
                                @Html.DropDownListFor(e => e.AccountsMapping.AccountTypeID, Model.AccountTypeList ?? new List<SelectListItem>(), Constants.Select, new { @id = "ddl_accounttype", @class = "form-control select2-container--material", @style = "width: 100%" })
                                <br style="line-height:1em" />
                                <span class="ddl-accounttype field-validation-error"></span>
                                @Html.ValidationMessageFor(e => e.AccountsMapping.AccountTypeID, "", new { @style = "margin-top: 0px !important;" })
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                            <div class="form-group is-empty">
                                @Html.DisplayNameFor(e => e.AccountsMapping.RMId)<span style="color: red"><strong>&nbsp;*</strong></span>
                                @Html.DropDownListFor(e => e.AccountsMapping.RMId, Model.EmployeList ?? new List<SelectListItem>(), Constants.Select, new { @id = "ddl_rmid", @class = "form-control select2-container--material", @style = "width: 100%" })
                                <br style="line-height:1em" />
                                @Html.ValidationMessageFor(e => e.AccountsMapping.RMId, "", new { @style = "margin-top: 0px !important;" })
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                            <div class="form-group is-empty">
                                @Html.DisplayNameFor(e => e.AccountsMapping.SecondaryRMId)<span style="color: red"><strong>&nbsp;*</strong></span>
                                @Html.DropDownListFor(e => e.AccountsMapping.SecondaryRMId, Model.EmployeList ?? new List<SelectListItem>(), Constants.Select, new { @id = "ddl_secondaryrmid", @class = "form-control select2-container--material", @style = "width: 100%" })
                                <br style="line-height:1em" />
                                @Html.ValidationMessageFor(e => e.AccountsMapping.SecondaryRMId, "", new { @style = "margin-top: 0px !important;" })
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 ">
                            <div class="form-group is-empty">
                                @Html.DisplayNameFor(e => e.AccountsMapping.UCC)<span style="color: red"><strong>&nbsp;*</strong></span>
                                @Html.TextBoxFor(e => e.AccountsMapping.UCC, htmlAttributes: new { @class = "form-control", @id = "txt_ucc", @readonly = "readonly" })
                                @Html.HiddenFor(e => e.AccountsMapping.ID, htmlAttributes: new { @class = "form-control", @id = "hdn_id" })
                                @Html.ValidationMessageFor(e => e.AccountsMapping.UCC, "", new { @class = "field-validation-error2" })
                                <span class="txt_ucc field-validation-error" style="margin-top:-40px  ;color:red"></span>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 ">
                            <div class="form-group is-empty">
                                @Html.DisplayNameFor(e => e.AccountsMapping.EffectiveFrom)<span style="color: red"><strong>&nbsp;*</strong></span>
                                @Html.TextBoxFor(e => e.AccountsMapping.EffectiveFrom, htmlAttributes: new { @id = "txt_effectivefrom", @class = "form-control date", @readonly = true })
                                @Html.ValidationMessageFor(e => e.AccountsMapping.EffectiveFrom, "", new { @class = "field-validation-error2" })
                                <span class="txt_ucc field-validation-error" style="margin-top:-40px  ;color:red"></span>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 ">
                            <div class="input-group">
                                <div class="checkbox">
                                    <label style="font-size:16px ">
                                        @Html.LabelFor(e => e.AccountsMapping.IsDefault, "Is Default")
                                        @Html.CheckBoxFor(e => e.AccountsMapping.IsDefault, htmlAttributes: new { @class = "checkbox" })
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row" id="div-buttons">
                        <div class="text-center" style="margin:10px;">
                            @if (Model.AccountsMapping.ID > 0)
                            {
                                <button type="button" onclick="SaveData()" class="btn btn-success">
                                    Update
                                </button>
                            }
                            else
                            {
                                <button type="button" onclick="SaveData()" class="btn btn-success ">
                                    Add
                                </button>
                                <button type="button" class="btn btn-warning" id="" onclick="Reset()">
                                    Reset
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

@section scripts{

    <script>

        var valid= true;

        $(document).ready(function () {
            $(".chart-loader").attr("style", "display:none");
            $("#div_form").show();

            $("#txt_ucc").on("click", function () {
               var Client = $("#ddl_client").val();
               var AccountType = $("#ddl_accounttype").val();
                var valid_client = false,
                    valid_account = false;
                if (Client != 0) {
                    valid_client = true;
                }
                if (AccountType != 0) {
                    valid_account = true;
                }
                if (valid_client && valid_account) {
                    $("#txt_ucc").attr("readonly", false);
                }
                else {
                    $("#txt_ucc").attr("readonly", true);
                }
            });

            $("#txt_ucc").on("change", function () {
                getAjax("@Url.Action("IsExists")", { UCC: $("#txt_ucc").val(), AccountType: $("#ddl_accounttype").val(), ClientID : $("#ddl_client").val() } , function (result) {
                switch (result.status) {
                    case "F":
                        $(".txt_ucc").empty().text(result.message);
                        $(".txt_ucc").show();
                        valid = false;
                        break;
                    case "S":
                        $(".txt_ucc").hide();
                        valid = true;
                        break;
                    default:
                }
            }, function (request, error) {
                alert(" Can't do because: " + error);
            })

            });

            $("#ddl_accounttype").on("change", function () {
                var ucc = $("#txt_ucc").val();
                var account = $("#ddl_client").val();
                if ((ucc != null && ucc != '') && (account != null && account != '')) {
                    $(".ddl-client").empty().text();
                    getAjax("@Url.Action("IsExists")", { UCC: $("#txt_ucc").val(), AccountType: $("#ddl_accounttype").val(), ClientID: $("#ddl_client").val() }, function (result) {
                        switch (result.status) {
                            case "F":
                                $(".txt_ucc").empty().text(result.message);
                                $(".txt_ucc").show();
                                valid = false;
                                break;
                            case "S":
                                $(".txt_ucc").hide();
                                valid = true;
                                break;
                            default:
                        }
                    }, function (request, error) {
                        alert(" Can't do because: " + error);
                    });
                }
            });

            $("#ddl_client").on("change", function () {
                var ucc = $("#txt_ucc").val();
                var account = $("#ddl_accounttype").val();
                if ((ucc != null && ucc != '') && (account != null && account != '')) {
                    $(".ddl-client").empty().text();
                    getAjax("@Url.Action("IsExists")", { UCC: $("#txt_ucc").val(), AccountType: $("#ddl_accounttype").val(), ClientID: $("#ddl_client").val() }, function (result) {
                        switch (result.status) {
                            case "F":
                                $(".txt_ucc").empty().text(result.message);
                                $(".txt_ucc").show();
                                valid = false;
                                break;
                            case "S":
                                $(".txt_ucc").hide();
                                valid = true;
                                break;
                            default:
                        }
                    }, function (request, error) {
                        alert(" Can't do because: " + error);
                    });
                }
            });

            $(".date").datepicker({
                changeMonth: true,
                changeYear: true,               
                dateFormat: "dd M yy"
            });

        });

            //  Save the Data.
        function SaveData() {
            if ($("form").valid() && valid) {
                $(".chart-loader").show();
                $("#div_form").hide();
                var object = $("form").serializeArray();
                var json = {};
                $.each(object, function () {
                    if (json[this.name] == undefined) {
                        json[this.name] = this.value;
                    }
                });
                postAjax("@Url.Action("AddUpdate")", json,
                    function (result) {
                        switch (result.status) {
                            case "F":
                                $("#notification").empty().text(result.message);
                                $("#notification_modal").modal("show").on(alignModal);
                                setTimeout(function () {
                                    $('#notification_modal').slideUp("slow").modal("hide");
                                }, 3000);
                                Message = null;
                                $(".chart-loader").hide();
                                $("#div_form").show();
                                break;
                            case "S":
                                window.localStorage.setItem("Message", result.message);
                                window.location.href = "@Url.Action("SummaryView")"
                                break;
                            default:
                        }
                    }, function (request, error) {
                        alert(" Can't do because: " + error);
                    })
            }
        }
    </script>

}
