@model ZOI.BAL.ViewModels.BankBranchViewModel
@using ZOI.BAL.Utilites

@{
    if (Model.bankBranchMaster.Id!=0)
    {
        ViewData["Title"] = "Update Bank Branch";
    }
    else
    {
        ViewData["Title"] = "Add Bank Branch";
    }
    ViewData["ActionTitle"] = "Back";
    ViewData["ActionIcon"] = "zmdi-arrow-back";
    ViewData["ActionId"] = "btn_back";
    ViewData["Url"] = Url.Action("SummaryView");
}

<form>
    <div id="div_form" class="container-fluid" style="display: none;margin-top: 40px;">
        <div class="content-body">
            <div class="card p-t-20">
                <div class="card-body">
                    <div class="row">
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 ">
                            <div class="form-group is-empty">
                                @Html.DisplayNameFor(e => e.bankBranchMaster.BankID)<span style="color: red"><strong>&nbsp;*</strong></span>
                                @if (Model.bankBranchMaster.Id != 0)
                                {
                                    <input type="hidden" name="@Model.bankBranchMaster.BankID">
                                    @Html.DropDownListFor(e => e.bankBranchMaster.BankID, Model.BankList ?? new List<SelectListItem>(), Constants.Select, new { @class = "form-control select2-container--material", @style = "width: 100%", @id = "ddl_banklist", @disabled = true })

                                }
                                else
                                {
                                    @Html.DropDownListFor(e => e.bankBranchMaster.BankID, Model.BankList ?? new List<SelectListItem>(), Constants.Select, new { @class = "form-control select2-container--material", @style = "width: 100%", @id = "ddl_banklist" })
                                }
                                <br style="line-height:1em" />
                                @Html.ValidationMessageFor(e => e.bankBranchMaster.BankID, "", new { @style = "margin-top: 0px !important;" })
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 ">
                            <div class="form-group is-empty">
                                @Html.DisplayNameFor(e => e.bankBranchMaster.Name)<span style="color: red"><strong>&nbsp;*</strong></span>
                                @if (Model.bankBranchMaster.Id != 0)
                                {
                                    @Html.TextBoxFor(e => e.bankBranchMaster.Name, htmlAttributes: new { @class = "form-control", @id = "txt_name", @readonly = true })
                                }
                                else
                                {
                                    @Html.TextBoxFor(e => e.bankBranchMaster.Name, htmlAttributes: new { @class = "form-control", @id = "txt_name", @onclick = "AllowAlpha()",@readonly=true })
                                }
                                @Html.ValidationMessageFor(e => e.bankBranchMaster.Name)
                                @Html.HiddenFor(e => e.bankBranchMaster.Id, htmlAttributes: new { @class = "form-control" })
                                <span class="txt_name field-validation-error" style="color:red"></span>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12 ">
                            <div class="form-group is-empty">
                                @Html.DisplayNameFor(e => e.bankBranchMaster.IFSCCode)<span style="color: red"><strong>&nbsp;*</strong></span>
                                @if (Model.bankBranchMaster.Id != 0)
                                {
                                    @Html.TextBoxFor(e => e.bankBranchMaster.IFSCCode, htmlAttributes: new { @class = "form-control", @id = "txt_ifsccode", @placeholder = "eg. IFSC1234567" ,@readonly=true})
                                }
                                else
                                {
                                    @Html.TextBoxFor(e => e.bankBranchMaster.IFSCCode, htmlAttributes: new { @class = "form-control", @id = "txt_ifsccode", @placeholder = "eg. IFSC1234567" })
                                }
                                @Html.ValidationMessageFor(e => e.bankBranchMaster.IFSCCode)
                                <span class="txt_ifsccode field-validation-error" style="color:red"></span>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                            <div class="form-group is-empty">
                                @Html.DisplayNameFor(e => e.bankBranchMaster.MICRCode)<span style="color: red"><strong>&nbsp;*</strong></span>
                                @if (Model.bankBranchMaster.Id != 0)
                                {
                                    @Html.TextBoxFor(e => e.bankBranchMaster.MICRCode, htmlAttributes: new { @class = "form-control", @id = "txt_micrcode", @placeholder = "eg. 123456789",@readonly=true })
                                }
                                else
                                {
                                    @Html.TextBoxFor(e => e.bankBranchMaster.MICRCode, htmlAttributes: new { @class = "form-control", @id = "txt_micrcode", @placeholder = "eg. 123456789" })
                                }
                                @Html.ValidationMessageFor(e => e.bankBranchMaster.MICRCode)
                                <span class="txt_micrcode field-validation-error" style="color:red"></span>
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                            <div class="form-group is-empty">
                                @Html.DisplayNameFor(e => e.bankBranchMaster.AddressLine1)<span style="color: red"><strong>&nbsp;*</strong></span>
                                @Html.TextAreaFor(e => e.bankBranchMaster.AddressLine1, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(e => e.bankBranchMaster.AddressLine1)
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                            <div class="form-group is-empty">
                                @Html.DisplayNameFor(e => e.bankBranchMaster.AddressLine2)
                                @Html.TextAreaFor(e => e.bankBranchMaster.AddressLine2, htmlAttributes: new { @class = "form-control" })
                                @Html.ValidationMessageFor(e => e.bankBranchMaster.AddressLine2)
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                            <div class="form-group is-empty">
                                @Html.DisplayNameFor(e => e.bankBranchMaster.CountryID)<span style="color: red"><strong>&nbsp;*</strong></span>
                                @Html.DropDownListFor(e => e.bankBranchMaster.CountryID, Model.CountryList ?? new List<SelectListItem>(), Constants.Select, new { @id = "ddl_country", @class = "form-control select2-container--material", @style = "width: 100%" })
                                <br style="line-height:1em" />
                                @Html.ValidationMessageFor(e => e.bankBranchMaster.CountryID, "", new { @style = "margin-top: 0px !important;" })
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                            <div class="form-group is-empty">
                                @Html.DisplayNameFor(e => e.bankBranchMaster.StateID)<span style="color: red"><strong>&nbsp;*</strong></span>
                                @Html.DropDownListFor(e => e.bankBranchMaster.StateID, Model.StateList ?? new List<SelectListItem>(), Constants.Select, new { @id = "ddl_state", @class = "form-control select2-container--material", @style = "width: 100%" })
                                <br style="line-height:1em" />
                                @Html.ValidationMessageFor(e => e.bankBranchMaster.StateID, "", new { @style = "margin-top: 0px !important;" })
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                            <div class="form-group is-empty">
                                @Html.DisplayNameFor(e => e.bankBranchMaster.CityID)<span style="color: red"><strong>&nbsp;*</strong></span>
                                @Html.DropDownListFor(e => e.bankBranchMaster.CityID, Model.CityList ?? new List<SelectListItem>(), Constants.Select, new { @id = "ddl_city", @class = "form-control select2-container--material", @style = "width: 100%" })
                                <br style="line-height:1em" />
                                @Html.ValidationMessageFor(e => e.bankBranchMaster.CityID, "", new { @style = "margin-top: 0px !important;" })
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                            <div class="form-group is-empty">
                                @Html.DisplayNameFor(e => e.bankBranchMaster.PinCode)<span style="color: red"><strong>&nbsp;*</strong></span>
                                @Html.TextBoxFor(e => e.bankBranchMaster.PinCode, htmlAttributes: new { @class = "form-control", @placeholder = "eg. 123456" })
                                @Html.ValidationMessageFor(e => e.bankBranchMaster.PinCode)
                            </div>
                        </div>
                        <div class="col-lg-4 col-md-4 col-sm-6 col-xs-12">
                            <div class="input-group">
                                <div class="checkbox">
                                    <label>
                                        @Html.DisplayNameFor(e => e.bankBranchMaster.IsActive)
                                        @Html.CheckBoxFor(e => e.bankBranchMaster.IsActive, htmlAttributes: new { @class = "checkbox" })
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="text-center" style="margin:10px;">
                            @if (Model.bankBranchMaster.Id != 0)
                            {
                                <button type="button" id="" onclick="SaveData()" class="btn btn-success">
                                    Update
                                </button>
                            }
                            else
                            {
                                <button type="button" id="" onclick="SaveData()" class="btn btn-success ">
                                    Add
                                </button>
                                <button type="button" class="btn btn-warning" id="" onclick="Reset()">
                                    Reset
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

@section scripts{

    <script>
        var name = true;
        var ifsc = true;
        var micr = true;

        var option = "<option value=''>--Select--</option>";
        $(document).ready(function () {
            $(".chart-loader").attr("style", "display:none");
            $("#div_form").show();
        });

        //  Enable the Branch name.
            $("#ddl_banklist").on("change", function () {
                $("#txt_name").attr("readonly", false);
            });

        //  Fill state dropdown
            $("#ddl_country").on("change", function () {
                getAjax("@Url.Action("GetStateList")", { CountryID: $(this).val() }, function (result) {
                    $("#ddl_city").empty().append(option);
                    $.each(result, function (index, val) {
                        option += "<option value='" + val.value + "'>" + val.text + " </option>"
                    });
                    $("#ddl_state").empty().append(option);
                    option = "<option value=''>--Select--</option>"
                }, function () {})
            })

        // Fill City dropdown
            $("#ddl_state").on("change", function () {
                getAjax("@Url.Action("GetCityList")", { StateID: $(this).val() }, function (response) {
                    console.log(response);
                    $.each(response, function (index, val) {
                                option += "<option value='" + val.value + "'>" + val.text +" </option>"
                            });
                            $("#ddl_city").empty().append(option);
                    option = "<option value=''>--Select--</option>";
                }, function () {})
            })

        // Hide the span error
        $("#txt_ifsccode").on("click", function () {
            $("#txt_ifsccode").parent().find("span").hide();
        });

        // Select bank error.
            $("#txt_name").on("click", function () {
                if ($("#ddl_banklist").val() == '') {
                    $(this).parent().find("span").hide();
                    $(".txt_name").empty().text("Please select the Bank.");
                    $(".txt_name").show();
                }
                else {
                    $(".txt_name").hide();
                }
            })

        // Check the duplicate value on change.
            $("#txt_name").on("change", function () {
                getAjax("@Url.Action("IsExstis")", { name: $("#txt_name").val(), ID: $("#hdn_id").val(), Bank: $("#ddl_banklist").val()}, function (result) {
                    switch (result.status) {
                        case "S":
                            $(".txt_name").hide();
                            name = true;
                            break;
                        case "F":
                            $(".txt_name").empty().text("The Branch Name was already exsits for this Bank.");
                            $(".txt_name").show();
                            name = false;
                            break;

                        default:
                    }
                }, function (request, error) {
                    alert(" Can't do because: " + error);
                })
            });

        // Check the duplicate value on change.
            $("#txt_micrcode").on("change", function () {
                getAjax("@Url.Action("IsMICRExstis")", { name: $("#txt_micrcode").val()}, function (result) {
                    switch (result.status) {
                        case "S":
                            $(".txt_micrcode").hide();
                            micr = true;
                            break;
                        case "F":
                            $(".txt_micrcode").empty().text("The IFSC was already exsits for Some Bank.");
                            $(".txt_micrcode").show();
                            micr = false;
                            break;

                        default:
                    }
                }, function (request, error) {
                    alert(" Can't do because: " + error);
                })
            });

        // Check the duplicate value on change.
            $("#txt_ifsccode").on("change", function () {
            getAjax("@Url.Action("IsIFSCExstis")", { name: $("#txt_ifsccode").val()}, function (result) {
                    switch (result.status) {
                        case "S":
                            $(".txt_ifsccode").hide();
                            ifsc = true;
                            break;
                        case "F":
                            $(".txt_ifsccode").empty().text("The IFSC was already exsits for Some Bank.");
                            $(".txt_ifsccode").show();
                            ifsc = fasle;
                            break;
                        default:
                    }
                }, function (request, error) {
                    alert(" Can't do because: " + error);
                })
            });

        //  Save the data.
        function SaveData() {
            // If the form is valid it goes to the next funcctionality.
             if ($("form").valid() && ifsc && micr && name) {
                    $("#div_form").css("filter","opacity(30%)")
                    $(".chart-loader").show();
                    var object = $("form").serializeArray();
                    var json = {};
                    $.each(object, function () {
                        if (json[this.name] == undefined) {
                            json[this.name] = this.value;
                        }
                    });
                      postAjax("@Url.Action("AddUpdate")", json,
                          function (result) {
                              debugger;
                              switch (result.status) {
                                  case "S":
                                      window.localStorage.setItem("Message", result.message);
                                      window.location.href = "@Url.Action("SummaryView")";
                                      break;
                                  case "F":
                                      show_notification(result.message);
                                      break;
                              }
                          },
                          function (request, error) {
                              show_notification("Something went wrong");
                        })
                }
        }


    </script>
}

